apply plugin: 'com.android.application'
apply plugin: 'kotlin-android'
apply plugin: 'realm-android'

ext {
    supportVersion = '25.1.0'
    ankoVersion = '0.9'
    kotlinVersion = "1.0.5-3"
    retrofitVersion = "2.1.0"
    moxyVersion = "1.3.3"
    daggerVersion = "2.0.2"
}

android {
    compileSdkVersion 25
    buildToolsVersion "25.0.0"
    defaultConfig {
        applicationId "com.prokkypew.oversentry"
        minSdkVersion 21
        targetSdkVersion 25
        versionCode 1
        versionName "1.0"
        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"
    }
    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }
    sourceSets {
        main.java.srcDirs += 'src/main/kotlin'
        test.java.srcDirs += 'src/test/kotlin'
    }
}
kapt {
    generateStubs = true
}

dependencies {
    compile fileTree(dir: 'libs', include: ['*.jar'])
    compile "com.android.support:appcompat-v7:$supportVersion"
    compile "com.android.support:recyclerview-v7:$supportVersion"
    compile "com.android.support:customtabs:$supportVersion"

    compile "org.jetbrains.kotlin:kotlin-stdlib:$kotlin_version"

    compile "org.jetbrains.anko:anko-sdk21:$ankoVersion"
    compile "org.jetbrains.anko:anko-recyclerview-v7:$ankoVersion"
    compile "org.jetbrains.anko:anko-appcompat-v7:$ankoVersion"

    compile "com.squareup.retrofit2:retrofit:$retrofitVersion"
    compile "com.squareup.retrofit2:converter-gson:$retrofitVersion"
    compile 'com.squareup.okhttp3:logging-interceptor:3.5.0'

    compile "com.arello-mobile:moxy-android:$moxyVersion"
    compile "com.arello-mobile:moxy-app-compat:$moxyVersion"
    compile "com.arello-mobile:moxy:$moxyVersion"
    kapt "com.arello-mobile:moxy-compiler:$moxyVersion"

    compile 'com.facebook.fresco:fresco:1.0.0'

    compile 'org.jsoup:jsoup:1.10.2'

    compile 'io.reactivex:rxandroid:1.2.1'
    compile 'io.reactivex:rxjava:1.2.5'

    compile "com.google.dagger:dagger:$daggerVersion"
    kapt "com.google.dagger:dagger-compiler:$daggerVersion"
    compile 'org.glassfish:javax.annotation:10.0-b28'

    kaptTest "com.google.dagger:dagger-compiler:$daggerVersion"
    testCompile 'org.robolectric:robolectric:3.0'
    testCompile 'junit:junit:4.12'
    testCompile 'org.mockito:mockito-core:1.10.19'
}
repositories {
    mavenCentral()
}

apply plugin: 'jacoco'

jacoco {
    toolVersion = "0.7.1.201405082137"
}

def coverageSourceDirs = [
        '../app/src/main/java',
        '../app/src/main/kotlin'
]

task jacocoTestReport(type: JacocoReport, dependsOn: "testDebugUnitTest") {
    group = "Reporting"
    description = "Generate Jacoco coverage reports"
    classDirectories = fileTree(
            dir: '../app/build/intermediates/classes/debug',
            excludes: ['**/R.class',
                       '**/R$*.class',
                       '**/*$ViewInjector*.*',
                       '**/*$ViewBinder*.*',   //DI
                       '**/*_MembersInjector*.*',  //DI
                       '**/*_Factory*.*',  //DI
                       '**/BuildConfig.*',
                       '**/Manifest*.*',
                       '**/io/realm/*.*',
                       '**/*PresentersBinder*.*',
                       '**/*State*.*',
                       '**/Lambda$*.class',
                       '**/Lambda.class',
                       '**/*Lambda.class',
                       '**/*Lambda*.class']
    )

    additionalSourceDirs = files(coverageSourceDirs)
    sourceDirectories = files(coverageSourceDirs)
    executionData = files('../app/build/jacoco/testDebugUnitTest.exec')

    reports {
        xml.enabled = true
        html.enabled = true
    }
}
